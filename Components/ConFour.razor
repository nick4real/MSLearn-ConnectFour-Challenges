@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @BoardColor; /** the color of the board **/
            --player1: @Player1Color; /** Player 1's piece color **/
            --player2: @Player2Color; /** Player 2's piece color **/
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<article>
    
    <span class="alert-info">@winnerMessage</span>
    <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
        @for (var i = 0; i < 42; i++)
        {
            <span class="@pieces[i]"></span>
        }
    </div>
</div>

@code {
    [Parameter] 
    public string BoardColor { get; set; } = "yellow";

    [Parameter] 
    public string Player1Color { get; set; } = "red";

    [Parameter] 
    public string Player2Color { get; set; } = "blue";

    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };
        }
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}

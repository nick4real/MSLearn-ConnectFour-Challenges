@using System.Drawing
@inject GameState State
@inject IJSRuntime JS
@rendermode InteractiveServer

<HeadContent>
    <style>
        :root {
            --board-bg: rgb(66, 99, 71);
            --player1: #ff6347;
            --player2: rgba(106, 90, 205, 0.5);
        }
    </style>
</HeadContent>

<article>
    @if (!string.IsNullOrEmpty(winnerMessage))
    {
        <div class="alert alert-primary"><strong>@winnerMessage</strong></div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger"><strong>@errorMessage</strong></div>
    }
    @if (!string.IsNullOrEmpty(CurrentTurn))
    {
        <div class="alert alert-info"><strong>@CurrentTurn</strong></div>
    }
</article>

<audio id="sound" src="beep.mp3" />

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        if (!IsColumnFull(col))
        {
            <span title="Click to play a piece" @onclick="() => PlayPiece(col)"><img class="arrow" src="arrow.svg"></span>
        }
        else
        {
            <span/>
        }
    }
</nav>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
        @for (var i = 0; i < 42; i++)
        {
            <span class="@pieces[i]"></span>
        }
    </div>
</div>

<button style="@ResetStyle" class="btn btn-primary mt-2" @onclick="ResetGame">Reset the game</button>


@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "width: 28em;";

    private void PlayPiece(byte col)
    {
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
            errorMessage = string.Empty;
            JS.InvokeVoidAsync("playSound", "sound");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };
        }
    }

    private bool IsColumnFull(byte col)
    {
        return State.TheBoard[col] != 0;
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}
